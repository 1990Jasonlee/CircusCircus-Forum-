Index: forum/forum.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import *\n#from flask.ext.login import LoginManager, login_required, current_user, logout_user, login_user\nfrom flask_login import LoginManager, current_user, login_user, logout_user\nimport datetime\n\nfrom flask_login.utils import login_required\nfrom forum.app import app\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom flask_login import UserMixin\nimport re\nimport datetime\nfrom flask_login.login_manager import LoginManager\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\n\ndb = SQLAlchemy(app)\n\n#VIEWS\n\n@app.route('/')\ndef index():\n\tsubforums = Subforum.query.filter(Subforum.parent_id == None).order_by(Subforum.id)\n\treturn render_template(\"subforums.html\", subforums=subforums)\n\n@app.route('/subforum')\ndef subforum():\n\tsubforum_id = int(request.args.get(\"sub\"))\n\tsubforum = Subforum.query.filter(Subforum.id == subforum_id).first()\n\tif not subforum:\n\t\treturn error(\"That subforum does not exist!\")\n\tposts = Post.query.filter(Post.subforum_id == subforum_id).order_by(Post.id.desc()).limit(50)\n\tif not subforum.path:\n\t\tsubforum.path = generateLinkPath(subforum.id)\n\n\tsubforums = Subforum.query.filter(Subforum.parent_id == subforum_id).all()\n\treturn render_template(\"subforum.html\", subforum=subforum, posts=posts, subforums=subforums, path=subforum.path)\n\n@app.route('/loginform')\ndef loginform():\n\treturn render_template(\"login.html\")\n\n\n@login_required\n@app.route('/addpost')\ndef addpost():\n\tsubforum_id = int(request.args.get(\"sub\"))\n\tsubforum = Subforum.query.filter(Subforum.id == subforum_id).first()\n\tif not subforum:\n\t\treturn error(\"That subforum does not exist!\")\n\n\treturn render_template(\"createpost.html\", subforum=subforum)\n\n@app.route('/viewpost')\ndef viewpost():\n\tpostid = int(request.args.get(\"post\"))\n\tpost = Post.query.filter(Post.id == postid).first()\n\tif not post:\n\t\treturn error(\"That post does not exist!\")\n\tif not post.subforum.path:\n\t\tsubforum.path = generateLinkPath(post.subforum.id)\n\tcomments = Comment.query.filter(Comment.post_id == postid).order_by(Comment.id.desc()) # no need for scalability now\n\treturn render_template(\"viewpost.html\", post=post, path=subforum.path, comments=comments)\n\n#ACTIONS\n\n@login_required\n@app.route('/action_comment', methods=['POST', 'GET'])\ndef comment():\n\tpost_id = int(request.args.get(\"post\"))\n\tpost = Post.query.filter(Post.id == post_id).first()\n\tif not post:\n\t\treturn error(\"That post does not exist!\")\n\tcontent = request.form['content']\n\tpostdate = datetime.datetime.now()\n\tcomment = Comment(content, postdate)\n\tcurrent_user.comments.append(comment)\n\tpost.comments.append(comment)\n\tdb.session.commit()\n\treturn redirect(\"/viewpost?post=\" + str(post_id))\n\n@login_required\n@app.route('/action_post', methods=['POST'])\ndef action_post():\n\tsubforum_id = int(request.args.get(\"sub\"))\n\tsubforum = Subforum.query.filter(Subforum.id == subforum_id).first()\n\tif not subforum:\n\t\treturn redirect(url_for(\"subforums\"))\n\n\tuser = current_user\n\ttitle = request.form['title']\n\tcontent = request.form['content']\n\t#check for valid posting\n\terrors = []\n\tretry = False\n\tif not valid_title(title):\n\t\terrors.append(\"Title must be between 4 and 140 characters long!\")\n\t\tretry = True\n\tif not valid_content(content):\n\t\terrors.append(\"Post must be between 10 and 5000 characters long!\")\n\t\tretry = True\n\tif retry:\n\t\treturn render_template(\"createpost.html\",subforum=subforum,  errors=errors)\n\tpost = Post(title, content, datetime.datetime.now())\n\tsubforum.posts.append(post)\n\tuser.posts.append(post)\n\tdb.session.commit()\n\treturn redirect(\"/viewpost?post=\" + str(post.id))\n\n\n@app.route('/action_login', methods=['POST'])\ndef action_login():\n\tusername = request.form['username']\n\tpassword = request.form['password']\n\tuser = User.query.filter(User.username == username).first()\n\tif user and user.check_password(password):\n\t\tlogin_user(user)\n\telse:\n\t\terrors = []\n\t\terrors.append(\"Username or password is incorrect!\")\n\t\treturn render_template(\"login.html\", errors=errors)\n\treturn redirect(\"/\")\n\n\n@login_required\n@app.route('/action_logout')\ndef action_logout():\n\t#todo\n\tlogout_user()\n\treturn redirect(\"/\")\n\n@app.route('/action_createaccount', methods=['POST'])\ndef action_createaccount():\n\tusername = request.form['username']\n\tpassword = request.form['password']\n\temail = request.form['email']\n\terrors = []\n\tretry = False\n\tif username_taken(username):\n\t\terrors.append(\"Username is already taken!\")\n\t\tretry=True\n\tif email_taken(email):\n\t\terrors.append(\"An account already exists with this email!\")\n\t\tretry = True\n\tif not valid_username(username):\n\t\terrors.append(\"Username is not valid!\")\n\t\tretry = True\n\t# if not valid_password(password):\n\t# \terrors.append(\"Password is not valid!\")\n\t# \tretry = True\n\tif retry:\n\t\treturn render_template(\"login.html\", errors=errors)\n\tuser = User(email, username, password)\n\tif user.username == \"admin\":\n\t\tuser.admin = True\n\tdb.session.add(user)\n\tdb.session.commit()\n\tlogin_user(user)\n\treturn redirect(\"/\")\n\ndef error(errormessage):\n\treturn \"<b style=\\\"color: red;\\\">\" + errormessage + \"</b>\"\n\ndef generateLinkPath(subforumid):\n\tlinks = []\n\tsubforum = Subforum.query.filter(Subforum.id == subforumid).first()\n\tparent = Subforum.query.filter(Subforum.id == subforum.parent_id).first()\n\tlinks.append(\"<a href=\\\"/subforum?sub=\" + str(subforum.id) + \"\\\">\" + subforum.title + \"</a>\")\n\twhile parent is not None:\n\t\tlinks.append(\"<a href=\\\"/subforum?sub=\" + str(parent.id) + \"\\\">\" + parent.title + \"</a>\")\n\t\tparent = Subforum.query.filter(Subforum.id == parent.parent_id).first()\n\tlinks.append(\"<a href=\\\"/\\\">Forum Index</a>\")\n\tlink = \"\"\n\tfor l in reversed(links):\n\t\tlink = link + \" / \" + l\n\treturn link\n\n\n#from forum.app import db, app \n\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n\n# if __name__ == \"__main__\":\n# \t#runsetup()\n# \tport = int(os.environ[\"PORT\"])\n# \tapp.run(host='0.0.0.0', port=port, debug=True)\n\n\n\n#DATABASE STUFF\n@login_manager.user_loader\ndef load_user(userid):\n\treturn User.query.get(userid)\n\n\npassword_regex = re.compile(\"^[a-zA-Z0-9!@#%&]{6,40}$\")\nusername_regex = re.compile(\"^[a-zA-Z0-9!@#%&]{4,40}$\")\n#Account checks\ndef username_taken(username):\n\treturn User.query.filter(User.username == username).first()\ndef email_taken(email):\n\treturn User.query.filter(User.email == email).first()\ndef valid_username(username):\n\tif not username_regex.match(username):\n\t\t#username does not meet password reqirements\n\t\treturn False\n\t#username is not taken and does meet the password requirements\n\treturn True\ndef valid_password(password):\n\treturn password_regex.match(password)\n#Post checks\ndef valid_title(title):\n\treturn len(title) > 4 and len(title) < 140\ndef valid_content(content):\n\treturn len(content) > 10 and len(content) < 5000\n\n\n#OBJECT MODELS\nclass User(UserMixin, db.Model):\n\tid = db.Column(db.Integer, primary_key=True)\n\tusername = db.Column(db.Text, unique=True)\n\tpassword_hash = db.Column(db.Text)\n\temail = db.Column(db.Text, unique=True)\n\tadmin = db.Column(db.Boolean, default=False, unique=True)\n\tposts = db.relationship(\"Post\", backref=\"user\")\n\tcomments = db.relationship(\"Comment\", backref=\"user\")\n\n\tdef __init__(self, email, username, password):\n\t\tself.email = email\n\t\tself.username = username\n\t\tself.password_hash = generate_password_hash(password)\n\tdef check_password(self, password):\n\t\treturn check_password_hash(self.password_hash, password)\nclass Post(db.Model):\n\tid = db.Column(db.Integer, primary_key=True)\n\ttitle = db.Column(db.Text)\n\tcontent = db.Column(db.Text)\n\tcomments = db.relationship(\"Comment\", backref=\"post\")\n\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n\tsubforum_id = db.Column(db.Integer, db.ForeignKey('subforum.id'))\n\tpostdate = db.Column(db.DateTime)\n\n\t#cache stuff\n\tlastcheck = None\n\tsavedresponce = None\n\tdef __init__(self, title, content, postdate):\n\t\tself.title = title\n\t\tself.content = content\n\t\tself.postdate = postdate\n\tdef get_time_string(self):\n\t\t#this only needs to be calculated every so often, not for every request\n\t\t#this can be a rudamentary chache\n\t\tnow = datetime.datetime.now()\n\t\tif self.lastcheck is None or (now - self.lastcheck).total_seconds() > 30:\n\t\t\tself.lastcheck = now\n\t\telse:\n\t\t\treturn self.savedresponce\n\n\t\tdiff = now - self.postdate\n\n\t\tseconds = diff.total_seconds()\n\t\tprint(seconds)\n\t\tif seconds / (60 * 60 * 24 * 30) > 1:\n\t\t\tself.savedresponce =  \" \" + str(int(seconds / (60 * 60 * 24 * 30))) + \" months ago\"\n\t\telif seconds / (60 * 60 * 24) > 1:\n\t\t\tself.savedresponce =  \" \" + str(int(seconds / (60*  60 * 24))) + \" days ago\"\n\t\telif seconds / (60 * 60) > 1:\n\t\t\tself.savedresponce = \" \" + str(int(seconds / (60 * 60))) + \" hours ago\"\n\t\telif seconds / (60) > 1:\n\t\t\tself.savedresponce = \" \" + str(int(seconds / 60)) + \" minutes ago\"\n\t\telse:\n\t\t\tself.savedresponce =  \"Just a moment ago!\"\n\n\t\treturn self.savedresponce\n\nclass Subforum(db.Model):\n\tid = db.Column(db.Integer, primary_key=True)\n\ttitle = db.Column(db.Text, unique=True)\n\tdescription = db.Column(db.Text)\n\tsubforums = db.relationship(\"Subforum\")\n\tparent_id = db.Column(db.Integer, db.ForeignKey('subforum.id'))\n\tposts = db.relationship(\"Post\", backref=\"subforum\")\n\tpath = None\n\thidden = db.Column(db.Boolean, default=False)\n\tdef __init__(self, title, description):\n\t\tself.title = title\n\t\tself.description = description\n\nclass Comment(db.Model):\n\tid = db.Column(db.Integer, primary_key=True)\n\tcontent = db.Column(db.Text)\n\tpostdate = db.Column(db.DateTime)\n\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n\tpost_id = db.Column(db.Integer, db.ForeignKey(\"post.id\"))\n\n\tlastcheck = None\n\tsavedresponce = None\n\tdef __init__(self, content, postdate):\n\t\tself.content = content\n\t\tself.postdate = postdate\n\tdef get_time_string(self):\n\t\t#this only needs to be calculated every so often, not for every request\n\t\t#this can be a rudamentary chache\n\t\tnow = datetime.datetime.now()\n\t\tif self.lastcheck is None or (now - self.lastcheck).total_seconds() > 30:\n\t\t\tself.lastcheck = now\n\t\telse:\n\t\t\treturn self.savedresponce\n\n\t\tdiff = now - self.postdate\n\t\tseconds = diff.total_seconds()\n\t\tif seconds / (60 * 60 * 24 * 30) > 1:\n\t\t\tself.savedresponce =  \" \" + str(int(seconds / (60 * 60 * 24 * 30))) + \" months ago\"\n\t\telif seconds / (60 * 60 * 24) > 1:\n\t\t\tself.savedresponce =  \" \" + str(int(seconds / (60*  60 * 24))) + \" days ago\"\n\t\telif seconds / (60 * 60) > 1:\n\t\t\tself.savedresponce = \" \" + str(int(seconds / (60 * 60))) + \" hours ago\"\n\t\telif seconds / (60) > 1:\n\t\t\tself.savedresponce = \" \" + str(int(seconds / 60)) + \" minutes ago\"\n\t\telse:\n\t\t\tself.savedresponce =  \"Just a moment ago!\"\n\t\treturn self.savedresponce\n\n\ndef init_site():\n\tadmin = add_subforum(\"Forum\", \"Announcements, bug reports, and general discussion about the forum belongs here\")\n\tadd_subforum(\"Announcements\", \"View forum announcements here\",admin)\n\tadd_subforum(\"Bug Reports\", \"Report bugs with the forum here\", admin)\n\tadd_subforum(\"General Discussion\", \"Use this subforum to post anything you want\")\n\tadd_subforum(\"Other\", \"Discuss other things here\")\n\ndef add_subforum(title, description, parent=None):\n\tsub = Subforum(title, description)\n\tif parent:\n\t\tfor subforum in parent.subforums:\n\t\t\tif subforum.title == title:\n\t\t\t\treturn\n\t\tparent.subforums.append(sub)\n\telse:\n\t\tsubforums = Subforum.query.filter(Subforum.parent_id == None).all()\n\t\tfor subforum in subforums:\n\t\t\tif subforum.title == title:\n\t\t\t\treturn\n\t\tdb.session.add(sub)\n\tprint(\"adding \" + title)\n\tdb.session.commit()\n\treturn sub\n\"\"\"\ndef interpret_site_value(subforumstr):\n\tsegments = subforumstr.split(':')\n\tidentifier = segments[0]\n\tdescription = segments[1]\n\tparents = []\n\thasparents = False\n\twhile('.' in identifier):\n\t\thasparents = True\n\t\tdotindex = identifier.index('.')\n\t\tparents.append(identifier[0:dotindex])\n\t\tidentifier = identifier[dotindex + 1:]\n\tif hasparents:\n\t\tdirectparent = subforum_from_parent_array(parents)\n\t\tif directparent is None:\n\t\t\tprint(identifier + \" could not find parents\")\n\t\telse:\n\t\t\tadd_subforum(identifier, description, directparent)\n\telse:\n\t\tadd_subforum(identifier, description)\n\ndef subforum_from_parent_array(parents):\n\tsubforums = Subforum.query.filter(Subforum.parent_id == None).all()\n\ttop_parent = parents[0]\n\tparents = parents[1::]\n\tfor subforum in subforums:\n\t\tif subforum.title == top_parent:\n\t\t\tcur = subforum\n\t\t\tfor parent in parents:\n\t\t\t\tfor child in subforum.subforums:\n\t\t\t\t\tif child.title == parent:\n\t\t\t\t\t\tcur = child\n\t\t\treturn cur\n\treturn None\n\n\ndef setup():\n\tsiteconfig = open('./config/subforums', 'r')\n\tfor value in siteconfig:\n\t\tinterpret_site_value(value)\n\"\"\"\n\n\ndb.create_all()\nif not Subforum.query.all():\n\t\tinit_site()\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/forum/forum.py b/forum/forum.py
--- a/forum/forum.py	(revision 9ba5e413e20014dd2152c995ab37adfbfd4d2eda)
+++ b/forum/forum.py	(date 1649775747617)
@@ -101,6 +101,7 @@
 		retry = True
 	if retry:
 		return render_template("createpost.html",subforum=subforum,  errors=errors)
+	##
 	post = Post(title, content, datetime.datetime.now())
 	subforum.posts.append(post)
 	user.posts.append(post)
